(window.webpackJsonp=window.webpackJsonp||[]).push([[17],{372:function(v,_,r){"use strict";r.r(_);var t=r(44),i=Object(t.a)({},(function(){var v=this,_=v.$createElement,r=v._self._c||_;return r("ContentSlotsDistributor",{attrs:{"slot-key":v.$parent.slotKey}},[r("h1",{attrs:{id:"面试题"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#面试题"}},[v._v("#")]),v._v(" 面试题")]),v._v(" "),r("h2",{attrs:{id:"一、spring-boot"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#一、spring-boot"}},[v._v("#")]),v._v(" 一、SPRING BOOT")]),v._v(" "),r("p",[v._v("1、springboot和springcloud的区别")]),v._v(" "),r("blockquote",[r("p",[v._v("springboot和springcloud的区别主要是：")]),v._v(" "),r("p",[v._v("1）作用不同。")]),v._v(" "),r("p",[v._v("前者的作用是为了提供一个默认配置，从而简化配置过程；后者的作用是为了给微服务提供一个综合管理框架。")]),v._v(" "),r("p",[v._v("2）使用方式不同。")]),v._v(" "),r("p",[v._v("前者可以单独使用；springcloud必须在springboot使用的前提下才能使用。")]),v._v(" "),r("p",[v._v("3）springboot和springcloud都是从spring生态圈中衍生出来的软件开发框架，但是二者的创作初衷是完全不同的，springboot的设计目的是为了在微服务开发中可以简化配置文件，提高工作效率，而springcloud的设计目的是为了管理同一项目中的各项微服务，因此二者是安全不同的两个软件开发框架。")])]),v._v(" "),r("p",[v._v("2、什么是分布式事务？有哪些实现方案？")]),v._v(" "),r("blockquote",[r("p",[v._v("在分布式系统中，一次业务处理可能需要多个应用来实现，比如用户发送一次下单请求，就涉及到订单系统创建订单、库存系统减库存，而对于一次下单，订单创建与减库存应该是要同时成功或同时失败的，但在分布式系统中，如果不做处理，就很可能出现订单创建成功，但是减库存失败，那么解决这类问题，就需要用到分布式事务。常见的解决方案有：")]),v._v(" "),r("p",[v._v("1）本地消息表：创建订单时，将库存消息加入到本地事务中一起提交到数据库存入本地消息表，然后调用库存系统，如果调用成功则修改本地消息状态为成功，如果调用库存系统失败，这由后台定时任务从本地消息表中取出未成功的消息，重新调用库存系统。")]),v._v(" "),r("p",[v._v("2）消息队列：目前RocketMQ中支持事务消息，它的工作原理是：")]),v._v(" "),r("p",[v._v("​     a.")]),v._v(" "),r("p",[v._v("​\t b.")]),v._v(" "),r("p",[v._v("3）Seata：")])]),v._v(" "),r("h2",{attrs:{id:"二、spring"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#二、spring"}},[v._v("#")]),v._v(" 二、SPRING")]),v._v(" "),r("h3",{attrs:{id:"_1、spring概述"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#_1、spring概述"}},[v._v("#")]),v._v(" 1、Spring概述")]),v._v(" "),r("h4",{attrs:{id:"_1-1、什么是spring"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#_1-1、什么是spring"}},[v._v("#")]),v._v(" 1.1、什么是spring？")]),v._v(" "),r("blockquote",[r("ul",[r("li",[r("p",[v._v("Spring是"),r("strong",[v._v("一个轻量级Java开发框架")]),v._v("，最早由Rod Johnson创建，目的是为了解决企业级应用开发的业务逻辑层和其他层的耦合问题。它是一个分层的JavaSE/Java EE full-stack（一站式）轻量级开源框架，为开发Java应用程序提供全面的基础架构支持。Spring负责基础架构，因此Java开发者可以专注应用程序的开发。")])]),v._v(" "),r("li",[r("p",[v._v("Spring最根本的使命"),r("strong",[v._v("解决企业级应用开发的复杂性，即简化Java开发")]),v._v("。")])]),v._v(" "),r("li",[r("p",[v._v("Spring可以做很多事情，它为企业级开发提供了丰富的功能，但是这些功能的底层都依赖于它两个核心特性：也就是"),r("strong",[v._v("依赖注入（dependency injection，DI）"),r("strong",[v._v("和")]),v._v("面向切面编程（aspect oriented programming，AOP）")])])])])]),v._v(" "),r("blockquote",[r("p",[v._v("为了降低Java开发的复杂性，Spring采取了以下4种关键策略")]),v._v(" "),r("ul",[r("li",[v._v("基于pojo的轻量级和最小侵入性编程")]),v._v(" "),r("li",[v._v("通过依赖注入和面向接口实现松耦合")]),v._v(" "),r("li",[v._v("基于切面和惯例进行声明式编程")]),v._v(" "),r("li",[v._v("通过切面和模板减少样板式代码")])])]),v._v(" "),r("h4",{attrs:{id:"_1-2、spring的两大核心概念"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#_1-2、spring的两大核心概念"}},[v._v("#")]),v._v(" 1.2、Spring的两大核心概念")]),v._v(" "),r("blockquote",[r("ul",[r("li",[r("strong",[v._v("IOC（控制反转）")]),v._v(" "),r("ul",[r("li",[v._v("控制反转，也叫依赖注入，它就是不会直接创建对象，只是把对象声明出来，在代码中不直接与对象和服务进行连接，但是在配置文件中描述了哪一项组件需要哪一项服务，容器将他们组件连接起来。在一般的IOC场景中容器创建了所有的对象，并设置了必要的属性将他们连接在一起，等到需要使用的时候才把他们声明出来，使用注解就更方便了，容器会自动根据注解把对象组合起来。")])])]),v._v(" "),r("li",[r("strong",[v._v("AOP（面向切面编程）")]),v._v(" "),r("ul",[r("li",[v._v("面向切面编程，这是一种编程模式，它允许程序员通过自定义的横切点进行模块化，将那些影响多个类的行为封装到可重用的模块中。例子：比如日志输出，不使用AOP的话就需要把日志的输出语句放在所有类中，方法中，但是有了AOP就可以把日志输出语句封装为一个可重用模块，再以声明式的方式将他们放到类中，每次使用类就自动完成日志输出")])])])])]),v._v(" "),r("h4",{attrs:{id:"_1-3、spring框架的设计目标-设计理念-和核心是什么"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#_1-3、spring框架的设计目标-设计理念-和核心是什么"}},[v._v("#")]),v._v(" 1.3、Spring框架的设计目标，设计理念，和核心是什么")]),v._v(" "),r("blockquote",[r("ul",[r("li",[r("strong",[v._v("Spring设计目标")]),v._v("：Spring为开发者提供一个一站式轻量级应用开发平台")]),v._v(" "),r("li",[r("strong",[v._v("Spring设计理念")]),v._v("：在JavaEE开发中，支持POJO和JavaBean开发方式，使应用面向接口开发，充分支持OOP（面向对象）设计方法；Spring通过IOC容器实现对象松耦关系的管理，并实现依赖反转，将对象之间的依赖关系交给IOC容器，实现解耦；")]),v._v(" "),r("li",[r("strong",[v._v("Spring框架的核心")]),v._v("：IOC容器和AOP模块。通过IOC容器管理POJO对象以及他们之间的耦合关系；通过AOP以动态非入侵的方式增强服务。")]),v._v(" "),r("li",[v._v("IOC让相互协作的组件保持松散的耦合，而AOP编程允许你把遍布于应用各层的功能分离出来形成可重用的功能组件。")])])]),v._v(" "),r("h4",{attrs:{id:"_1-4、spring的优缺点是什么"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#_1-4、spring的优缺点是什么"}},[v._v("#")]),v._v(" 1.4、Spring的优缺点是什么？")]),v._v(" "),r("blockquote",[r("p",[r("strong",[v._v("优点")])]),v._v(" "),r("ul",[r("li",[r("p",[v._v("方便解耦，简化开发")]),v._v(" "),r("p",[v._v("Spring就是一个大工厂，可以将所有对象的创建和依赖关系的维护，交给spring管理")])]),v._v(" "),r("li",[r("p",[v._v("AOP编程的支持")]),v._v(" "),r("p",[v._v("Spring提供面向切面编程，可以方便的实现对程序进行权限拦截，、运行监控等功能")])]),v._v(" "),r("li",[r("p",[v._v("声明式事务的支持")]),v._v(" "),r("p",[v._v("只需要通过配置就可以完成对事务的管理，而无需手动编程。")])]),v._v(" "),r("li",[r("p",[v._v("方便程序的测试")]),v._v(" "),r("p",[v._v("Spring对Junit4的支持，可以通过注解方便的测试Spring程序")])]),v._v(" "),r("li",[r("p",[v._v("方便集成各种优秀框架")]),v._v(" "),r("p",[v._v("Spring不排斥各种优秀的开源框架，其内部提供了对各种优秀框架的直接支持（如：Struts、Hibernate、Mybatis等）")])]),v._v(" "),r("li",[r("p",[v._v("降低了JavaEE API的使用难点")]),v._v(" "),r("p",[v._v("Spring对JavaEE开发中非常难用的一些API（JDBC、JavaMail、远程调用等），都提供了封装，使这些API应用难度大大降低。")])])]),v._v(" "),r("p",[r("strong",[v._v("缺点")])]),v._v(" "),r("ul",[r("li",[v._v("Spring明明是一个很轻量级的框架，却给人感觉大而全")]),v._v(" "),r("li",[v._v("Spring依赖反射，反射影响性能")]),v._v(" "),r("li",[v._v("使用门槛升高，入门spring需要较长时间")])])]),v._v(" "),r("h4",{attrs:{id:"_1-5、spring有哪些应用场景"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#_1-5、spring有哪些应用场景"}},[v._v("#")]),v._v(" 1.5、Spring有哪些应用场景")]),v._v(" "),r("blockquote",[r("p",[r("strong",[v._v("应用场景")])]),v._v(" "),r("ul",[r("li",[v._v("Java企业应用开发：SSH、SSM等")])]),v._v(" "),r("p",[r("strong",[v._v("Spring价值")])]),v._v(" "),r("ul",[r("li")])])])}),[],!1,null,null,null);_.default=i.exports}}]);